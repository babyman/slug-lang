//
// the slug standard library
// -------------------------

// return a string value indicating the type of `val`
@testWith(
	[nil], "NIL",
	[true], "BOOLEAN",
	[1], "NUMBER",
	["Hello Slug!"], "STRING",
	[[1, 2]], "LIST",
	[{key:"value"}], "MAP"
)
foreign type = fn(val);

@testWith(
	["type"], true,
	["__not_defined__"], false
)
foreign isDefined = fn(val);

foreign printf = fn(str, ...args);

foreign sprintf = fn(str, ...args);

// get the list of keys used a map
@testWith(
	[{k:1}], ["k"]
)
foreign keys = fn(map);

// get a value from a map, nil if not present
foreign get = fn(map, key);

// put a value into a map
foreign put = fn(map, key, value);

// remove a key from a map
foreign remove = fn(map, key);

foreign update = fn(list, index, value);

@testWith(
	[[1,2],0,1], [2,1]
)
foreign swap = fn(list, index1, index2);

var compute = fn(map, key, f) {
    map.put(key, f(key, map[key]));
}

var map = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] => map(t, f, acc :+ h.f());
		[] => acc;
	}
}

var filter = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] if h.f() => filter(t, f, acc :+ h);
		[h, ...t] => filter(t, f, acc);
		[] => acc;
	}
}

var reduce = fn(vs, v, f) {
	match vs {
		[h, ...t] => reduce(t, f(v, h), f);
		[] => v;
	}
}

var zeroIfAbove = fn(a, b) {
	if ( a < b ) {
		a
	} else {
		0
	}
}
