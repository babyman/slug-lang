//
// the slug standard library
// -------------------------

// return a string value indicating the type of `val`
@testWith(
	[nil], "NIL",
	[true], "BOOLEAN",
	[1], "NUMBER",
	["Hello Slug!"], "STRING",
	[[1, 2]], "LIST",
	[{key:"value"}], "MAP"
)
@export
foreign type = fn(val);

@testWith(
	["type"], true,
	["__not_defined__"], false
)
@export
foreign isDefined = fn(val);

@export
foreign printf = fn(str, ...args);

@export
foreign sprintf = fn(str, ...args);

// get the list of keys used a map
@testWith(
	[{}], [],
	[{k:1}], ["k"]
)
@export
foreign keys = fn(map);

// get a value from a map, nil if not present
@testWith(
	[{}, "k"], nil,
	[{k:1}, "k"], 1
)
@export
foreign get = fn(map, key);

// put a value into a map
@export
foreign put = fn(map, key, value);

// remove a key from a map
@export
foreign remove = fn(map, key);

@testWith(
	[[1,2,3], 1, 99], [1,99,3]
)
@export
foreign update = fn(list, index, value);

@testWith(
	[[1,2],0,1], [2,1]
)
@export
foreign swap = fn(list, index1, index2);

@export
var compute = fn(map, key, f) {
    map.put(key, f(key, map[key]));
}

@export
var map = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] => map(t, f, acc :+ h.f());
		[] => acc;
	}
}

@export
var filter = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] if h.f() => filter(t, f, acc :+ h);
		[h, ...t] => filter(t, f, acc);
		[] => acc;
	}
}

@export
var reduce = fn(vs, v, f) {
	match vs {
		[h, ...t] => reduce(t, f(v, h), f);
		[] => v;
	}
}

@export
var counter = fn(start = 0) {
    var count = start - 1;
    fn() {
        count = count + 1;
    };
}

@testWith(
	[["a", "b"], fn(){1}], [["a", 1], ["b", 1]]
)
@export
var zipWith = fn(lst, f) {
	lst.map(fn(v) { [v, f()] });
}

@testWith(
	[[]], [],
	[["a", "b"]], [["a", 0], ["b", 1]]
)
@export
var zipWithIndex = fn(lst) {
	lst.zipWith(counter(0));
}

@testWith(
	[[], []], [],
	[[1], []], [],
	[[], [1]], [],
	[[1], [2]], [[1, 2]]
)
@export
var zip = fn(lst1, lst2, acc = []) {
	if (len(lst1) == 0 || len(lst2) == 0) {
		acc
	} else {
		zip(lst1[1:], lst2[1:], acc :+ [lst1[0], lst2[0]])
	}
}

@testWith(
	[1, 1], 0,
	[1, 2], 1,
	[2, 1], 0
)
@export
var zeroIfAbove = fn(a, b) {
	if ( a < b ) {
		a
	} else {
		0
	}
}
