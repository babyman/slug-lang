var {*} = import(
	"slug.string"
);

//
// the slug standard library
// -------------------------
@export val NIL_TYPE = "NIL";
@export val BOOLEAN_TYPE = "BOOLEAN";
@export val NUMBER_TYPE = "NUMBER";
@export val STRING_TYPE = "STRING";
@export val LIST_TYPE = "LIST";
@export val MAP_TYPE = "MAP";
@export val FUNCTION_TYPE = "FUNCTION";


// return a string value indicating the type of `val`
@testWith(
	[nil], NIL_TYPE,
	[true], BOOLEAN_TYPE,
	[1], NUMBER_TYPE,
	[1.1], NUMBER_TYPE,
	["Hello Slug!"], STRING_TYPE,
	[[1, 2]], LIST_TYPE,
	[{key:"value"}], MAP_TYPE,
	[fn(a){a}], FUNCTION_TYPE
)
@export
foreign type = fn(val);

@testWith(
	["type"], true,
	["__not_defined__"], false
)
@export
foreign isDefined = fn(val);

@export
foreign printf = fn(@str str, ...args);

@export
foreign sprintf = fn(@str str, ...args);

// get the list of keys used a map
@testWith(
	[{}], [],
	[{k:1}], ["k"]
)
@export
foreign keys = fn(@map map);

// get a value from a map, nil if not present
@testWith(
	[{}, "k"], nil,
	[{k:1}, "k"], 1
)
@export
foreign get = fn(@map map, key);

@testWith(
	[{}, "k", "v"], {k:"v"}
)
@export
foreign put = fn(@map map, key, value);

@testWith(
	[{}, "k"], {},
	[{k:1}, "k"], {},
	[{k:1}, "j"], {k:1}
)
@export
foreign remove = fn(@map map, key);

@testWith(
	[[1,2,3], 1, 99], [1,99,3]
)
@export
foreign update = fn(@list list, @num index, value);

@testWith(
	[[1,2],0,1], [2,1]
)
@export
foreign swap = fn(@list list, @num index1, @num index2);

@testWith(
	[{k:1}, "k", fn(k, v) { v + 1 }], {k:2},
	[{}, "k", fn(k, v) { v == nil }], {k:true}
)
@export
var compute = fn(@map map, key, f) {
    map.put(key, f(key, map[key]));
}

@testWith(
	[[1,2], fn(n) {n * 2}], [2,4]
)
@export
var map = fn(@list vs, f, acc = []) {
	match vs {
		[h, ...t] => map(t, f, acc :+ h.f());
		[] => acc;
	}
}

@testWith(
	[[1,2,3,4], fn(v) { v % 2 == 0}], [2,4]
)
@export
var filter = fn(@list vs, f, acc = []) {
	match vs {
		[h, ...t] if h.f() => filter(t, f, acc :+ h);
		[h, ...t] => filter(t, f, acc);
		[] => acc;
	}
}

@testWith(
	[[], 0, fn(a,b) {a+b}], 0,
	[[1,2,3], 0, fn(a,b) {a+b}], 6,
	[[1,2,3], 9, fn(a,b) {a+b}], 15
)
@export
var reduce = fn(@list vs, v, f) {
	match vs {
		[h, ...t] => reduce(t, f(v, h), f);
		[] => v;
	}
}

@testWith(
	[0, 0], [],
	[0, 2], [0, 1],
	[0, 6, 2], [0, 2, 4],
	[0, 6, -2], [],
	[6, 0, -2], [6, 4, 2]
)
@export
var range = fn(@num start, @num end, @num step = 1, @list acc = []) {
	if ((start < end && step > 0)
		|| (start > end && step < 0)) {
		range(start + step, end, step, acc :+ start)
	} else {
		acc
	}
}

@export
var counter = fn(@num start = 0) {
    var count = start - 1;
    fn() {
        count = count + 1;
    };
}

@testWith(
	[["a", "b"], fn(){1}], [["a", 1], ["b", 1]]
)
@export
var zipWith = fn(@list lst, f) {
	lst.map(fn(v) { [v, f()] });
}

@testWith(
	[[]], [],
	[["a", "b"]], [["a", 0], ["b", 1]]
)
@export
var zipWithIndex = fn(@list lst) {
	lst.zipWith(counter(0));
}

@testWith(
	[[], []], [],
	[[1], []], [],
	[[], [1]], [],
	[[1], [2]], [[1, 2]]
)
@export
var zip = fn(@list lst1, @list lst2, acc = []) {
	if (len(lst1) == 0 || len(lst2) == 0) {
		acc
	} else {
		zip(lst1[1:], lst2[1:], acc :+ [lst1[0], lst2[0]])
	}
}

@testWith(
	[nil], false,
	[0], false,
	[1], true,
	[true], true,
	[false], false,
	["true"], true,
	["yes"], true,
	["1"], true,
	["false"], false,
	["no"], false,
	["0"], false
)
@export
var toBoolean = fn(v) {
	match v.type() {
		t if t == BOOLEAN_TYPE => v;
		t if t == NUMBER_TYPE => v == 1;
		t if t == NIL_TYPE => false;
		t if t == STRING_TYPE => {
			match v.toLower() {
				"true", "yes", "1" => true;
				"false", "no", "0" => false;
				_ => UnsupportedTypeConversionError({msg: "Cannot convert '{{v}}' to boolean"})
			}
		}
		t => throw UnsupportedTypeConversionError({msg: "Cannot convert type {{t}} to boolean"});
	}
}

@testWith(
	["1"], 1,
	["1.1"], 1.1
)
@export
foreign parseNumber = fn(@str value);

@testWith(
	[nil], nil,
	[1], 1,
	[1.1], 1.1,
	["1"], 1,
	["1.1"], 1.1
)
@export
var toNumber = fn(v) {
	match v.type() {
		t if t == NIL_TYPE => nil;
		t if t == NUMBER_TYPE => v;
		t if t == STRING_TYPE => parseNumber(v);
		t => throw UnsupportedTypeConversionError({msg: "Cannot convert type {{t}} to number"});
	}
}

@testWith(
	[nil], nil,
	["str"], "str",
	[1.1], "1.1",
	[true], "true"
)
@export
var toString = fn(v) {
	match v.type() {
		t if t == NIL_TYPE => nil;
		t if t == STRING_TYPE => v;
		t => v + "";
	}
}

@testWith(
    [[], []], true,
    [[1], []], false,
    [[], [1]], false,
    [[1], [2]], false,
    [[[1], [1]], [[1], [2]]], false,
    [[[1], [2]], [[1], [2]]], true
)
@export
var equals = fn(@list a, @list b, @num idx = 0) {
    if (a == nil || b == nil) {
        false;
    } else if(idx >= len(a) && len(a) == len(b)) {
        true;
    } else if(type(a[idx]) == LIST_TYPE && type(b[idx]) == LIST_TYPE ) {
        equals(a[idx], b[idx]) && equals(a, b, idx + 1);
    } else if(type(a[idx]) == MAP_TYPE && type(b[idx]) == MAP_TYPE ) {
        equals(a[idx], b[idx]) && equals(a, b, idx + 1);
    } else if(a[idx] == b[idx]) {
        equals(a, b, idx + 1);
    } else {
        false;
    }
}

@testWith(
	[nil, nil], false,
	[{}, nil], false,
	[nil, {}], false,
	[{}, {}], true,
	[{k1:1}, {k1:1}], true,
	[{k1:1}, {}], false,
	[{k1:1}, {k2:2}], false
)
@export
var equals = fn(@map m1, @map m2) {
	if (m1 == nil || m2 == nil) {
		return false
	}
	var check = fn(ks) {
		match ks {
			[] => true;
			[k, ...t] if m1[k] == m2[k] => check(t);
			_ => false
		}
	}
	var k1 = m1.keys();
	var k2 = m2.keys();
	if(len(k1) != len(k2)) {
		false
	} else {
		check(k1 + k2);
	}
}

@export
var ifNil = fn(v, @fun f) {
	if (v == nil) {
		f()
	} else {
		v
	}
}

@export
var ifNil = fn(v, default) {
	v.ifNil(fn() {default})
}

@export
var nonNil = fn(v, @fun f, default = nil) {
	if (v != nil) {
		f(v)
	} else {
		default
	}
}

@export
var compare = fn(a, b) { 
    if (a < b) {
        -1
    } else if (a > b) {
        1
    } else {
        0
    }
}


@testWith(
	[1, 1], 0,
	[1, 2], 1,
	[2, 1], 0
)
@export
var zeroIfAbove = fn(@num a, @num b) {
	if ( a < b ) {
		a
	} else {
		0
	}
}
