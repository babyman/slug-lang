//
// the slug standard library
// -------------------------

// return a string value indicating the type of `val`
foreign type = fn(val);

foreign isDefined = fn(val);

// get the list of keys used a map
foreign keys = fn(map);

// get a value from a map, nil if not present
foreign get = fn(map, key);

// put a value into a map
foreign put = fn(map, key, value);

// remove a key from a map
foreign remove = fn(map, key);

foreign update = fn(list, index, value);

foreign swap = fn(list, index1, index2);

var compute = fn(map, key, f) {
    map.put(key, f(key, map[key]));
}

var map = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] => map(t, f, acc :+ h.f());
		[] => acc;
	}
}

var filter = fn(vs, f, acc = []) {
	match vs {
		[h, ...t] if h.f() => filter(t, f, acc :+ h);
		[h, ...t] => filter(t, f, acc);
		[] => acc;
	}
}

var reduce = fn(vs, v, f) {
	match vs {
		[h, ...t] => reduce(t, f(v, h), f);
		[] => v;
	}
}

var zeroIfAbove = fn(a, b) {
	if ( a < b ) {
		a
	} else {
		0
	}
}
