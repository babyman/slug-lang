var {*} = import (
    "slug.std",
    "slug.math"
);

@testWith(
    [[], []], true,
    [[1], []], false,
    [[], [1]], false,
    [[1], [2]], false,
    [[[1], [1]], [[1], [2]]], false,
    [[[1], [2]], [[1], [2]]], true
)
@export
var equals = fn(@list a, @list b, @num idx = 0) {
    if (a == nil || b == nil) {
        false;
    } else if(idx >= len(a) && len(a) == len(b)) {
        true;
    } else if(type(a[idx]) == LIST_TYPE && type(b[idx]) == LIST_TYPE ) {
        equals(a[idx], b[idx]) && equals(a, b, idx + 1);
    } else if(a[idx] == b[idx]) {
        equals(a, b, idx + 1);
    } else {
        false;
    }
}

@testWith(
    [[1, 2], 2], 1,
    [[1, 2], 1], 0,
    [[1, 2], 9], -1
)
@export
var indexOf = fn(@list list, value, @num idx = 0) {
    if(idx > len(list)) {
        -1
    } else if (list[idx] == value) {
        idx
    } else {
        indexOf(list, value, idx + 1)
    }
}

@testWith(
    [[1,2,3], 2], [1,3],
    [[1,2,3], 5], [1,2,3]
)
@export
var removeValue = fn(@list list, value) {
    match indexOf(list, value) {
        i if i >= 0 => {
            list[:i] + list[i + 1:];
        }
        _ => list;
    }
}

@export
var shuffle = var fisherYatesShuffle = fn(@list list) {
    var _shuffle = fn(list, i) {
        if(i == 0) {
            list;
        } else {
            val j = rndRange(0, i)
            _shuffle(list.swap(i, j), i - 1)
        }
    };
    _shuffle(list, len(list) - 1);
}
