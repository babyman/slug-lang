var {*} = import (
    "slug.std"
);

@export
foreign trim = fn(str);

@export
foreign indexOf = fn(str, seq, index = 0);

@export
foreign toUpper = fn(str);

@export
foreign toLower = fn(str);

@export
var contains = fn(str, seq) {
	str.indexOf(seq) >= 0;
}

@export
var startsWith = fn(str, start) {
	str[:len(start)] == start;
}

@export
var endsWith = fn(str, end) {
	str[len(str) - len(end):] == end;
}

@export
var isUpper = fn(str) {
	str == str.toUpper();
}

@export
var isLower = fn(str) {
	str == str.toLower();
}

// split splits a string into a list of substrings based on a delimiter
// Parameters:
//   str: The input string to split
//   delimiter: The delimiter string to split on
//   max: Maximum number of splits to perform (-1 for unlimited)
//   count: Internal counter for number of splits performed
//   strs: Internal accumulator for storing split strings
// Returns:
//   Array of substrings split by the delimiter
@testWith(
	["slug/test", "/"], ["slug", "test"]
)
@export
var split = fn(str, delimiter, max = -1, count = 1, strs = []) {
	match str.indexOf(delimiter) {
		n if n >= 0 && (max < 0 || count < max) => {
			val i = n + delimiter.len();
			split(str[i:], delimiter, max, count + 1, strs :+ str[:n]);
		}
		_ => strs :+ str;
	}
}

@testWith(
	[["slug", "test"], "."], "slug.test"
)
@export
var join = fn(strs, delimiter, str = nil) {
	match strs {
		[] => str;
		[h, ...t] if str == nil => join(t, delimiter, h);
		[h, ...t] => join(t, delimiter, str + delimiter + h);
	}
}

@testWith(
	["slug/test", "/", "."], "slug.test",
	["slug", "/", "."], "slug",
	[nil, "/", "."], nil
)
@export
var replaceAll = fn(str, replace, with) {
	if (str == nil) {
		nil
	} else {
		str.split(replace).join(with);
	}
}
