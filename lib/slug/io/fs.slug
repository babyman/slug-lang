
// readFile reads entire file content as a string
// Parameters:
//   path: path to the file to read
// Returns:
//   string content of file, or error if file cannot be read
@export
foreign readFile = fn(@str path);

// writeFile writes string content to a file
// Parameters:
//   path: path to file to write
//   contents: string data to write
// Returns:
//   nil on success, error if write fails
@export
foreign writeFile = fn(@str path, @str contents);

// appendFile appends string content to end of file
// Parameters:
//   path: path to file to append to
//   contents: string data to append
// Returns:
//   nil on success, error if write fails
@export
foreign appendFile = fn(@str path, @str contents);

// info gets information about a file
// Parameters:
//   path: path to file to get info for
// Returns:
//   object containing file metadata
@export
foreign info = fn(@str path);

// exists checks if a file exists and is accessible
// Parameters:
//   path: path to check
// Returns:
//   true if file exists and is accessible, false otherwise
@export
foreign exists = fn(@str path);

// isDir checks if path points to a directory
// Parameters:
//   path: path to check
// Returns:
//   true if path is a directory, false otherwise
@export
foreign isDir = fn(@str path);

// ls lists contents of a directory (non-recursively)
// Parameters:
//   path: directory path to list
// Returns:
//   list of filenames in the directory
@export
foreign ls = fn(@str path);

// rm removes a file or empty directory
// Parameters:
//   path: path to remove
// Returns:
//   nil on success, error if removal fails
@export
foreign rm = fn(@str path);

@export val READ_MODE = "r";
@export val WRITE_MODE = "w";
@export val APPEND_MODE = "a";

// openFile opens a file in specified mode
// Parameters:
//   path: path to file to open
//   mode: "r" for read, "w" for write, "a" for append
// Returns:
//   file handle number on success, error if open fails
@export
foreign openFile = fn(@str path, @str mode);

// readLine reads the next line from an open file
// Parameters:
//   handle: file handle from openFile
// Returns:
//   string containing next line, or error if read fails
@export
foreign readLine = fn(@num handle);

// readBytes reads a fixed number of bytes from file
// Parameters:
//   handle: file handle from openFile
//   count: number of bytes to read
// Returns:
//   string containing read bytes, or error if read fails

// write writes string content to an open file
// Parameters:
//   handle: file handle from openFile
//   content: string data to write
// Returns:
//   number of bytes written, or error if write fails
@export
foreign write = fn(@num handle, @str content);

// closeFile closes an open file handle
// Parameters:
//   handle: file handle to close
// Returns:
//   nil on success, error if close fails
@export
foreign closeFile = fn(@num handle)

@export
var readLines = fn(@num file, lines = []) {
	match file.readLine() {
		nil => lines
		str => readLines(file, lines :+ str[:-1]) // -1 to trim the newline
	}
}
