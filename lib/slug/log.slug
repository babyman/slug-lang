var {*} = import(
    "slug.std", 
    "slug.actor",
    "slug.time",
    "slug.list"
);

val __TRACE = 0;
val __DEBUG = 1;
val __INFO = 2;
val __WARN = 3;
val __ERROR = 4;
val __NONE = 5;

val __LEVELS = ["trace", "debug", "info", "warn", "error", "none"];
val __COLOURS = ["\033[90m", "\033[36m", "\033[32m", "\033[33m", "\033[31m"];
val __RESET_COLOR = "\033[0m";

var _logger = fn(logLevel = __NONE) {
    match receive() {
        {tag:"configure", level} => _logger(level)
        {tag:"log", level, ...l} if level >= logLevel => {
                val tag = sprintf("%s%-5s%s", __COLOURS[level], __LEVELS[level], __RESET_COLOR);
                var msg = l.message;
                if (msg[-1] != "\n") {
                    msg = msg + "\n";
                }
                printf("%s [ %s ] %s", fmtClock(l.time, "2006-01-02 15:04:05.000"), tag, msg);
            }
    }
    _logger(logLevel);
}

var _log_actor = mailbox().bindActor(_logger);

var _log = fn(level, message) {
    _log_actor.send({ tag: "log", time: clock(), level: level, message: message })
}

var configureLogging = fn(level) {
    val lvl = __LEVELS.indexOfValue(level);
    _log_actor.send({ tag:"configure", level: lvl })
}

var logTrace = fn(message) { _log(__TRACE, message) }
var logDebug = fn(message) { _log(__DEBUG, message) }
var logInfo = fn(message) { _log(__INFO, message) }
var logWarn = fn(message) { _log(__WARN, message) }
var logError = fn(message) { _log(__ERROR, message) }
var logNone = fn(message) { _log(__NONE, message) }
