var {*} = import(
    "slug.std", 
    "slug.actor",
    "slug.time",
    "slug.list"
);

val TRACE = 0;
val DEBUG = 1;
val INFO = 2;
val WARN = 3;
val ERROR = 4;
val NONE = 5;

val LEVELS = ["trace", "debug", "info", "warn", "error", "none"];
val COLOURS = ["\033[90m", "\033[36m", "\033[32m", "\033[33m", "\033[31m"];
val RESET_COLOR = "\033[0m";

var logger = fn(logLevel = NONE) {
    match receive() {
        {tag:"configure", level} => logger(level)
        {tag:"log", level, ...l} if level >= logLevel => {
                val tag = sprintf("%s%-5s%s", COLOURS[level], LEVELS[level], RESET_COLOR);
                var msg = sprintf(l.message, ...l.args);
                if (msg[-1] != "\n") {
                    msg = msg + "\n";
                }
                printf("%s [ %s ] %s", fmtClock(l.time, "2006-01-02 15:04:05.000"), tag, msg);
            }
    }
    logger(logLevel);
}

// create a mailbox and bind the logging function to it
var logActor = mailbox().bindActor(logger);

@export
var configureLogging = fn(level) {
    val lvl = LEVELS.indexOfValue(level);
    logActor.send({ tag:"configure", level: lvl })
}

var _log = fn(level, message, args) {
    logActor.send({ tag: "log", time: clock(), level: level, message: message, args: args })
}

@export
var logTrace = fn(message, ...args) { _log(TRACE, message, args) }
@export
var logDebug = fn(message, ...args) { _log(DEBUG, message, args) }
@export
var logInfo = fn(message, ...args) { _log(INFO, message, args) }
@export
var logWarn = fn(message, ...args) { _log(WARN, message, args) }
@export
var logError = fn(message, ...args) { _log(ERROR, message, args) }
@export
var logNone = fn(message, ...args) { _log(NONE, message, args) }
