var {*} = import(
	"slug.string"
);

@testWith(
	["E &amp; S"], "E & S"
)
@export
var htmlUnescape = fn(str) {
	str.replaceAll("&amp;", "&")
		.replaceAll("&lt;", "<")
		.replaceAll("&gt;", ">")
		.replaceAll("&quot;", "\"")
		.replaceAll("&#39;", "'")   // numeric apostrophe
}

@testWith(
	["<a>hi</a>", "a", -1], "",
	["<a>hi</a>", "div"], "",
	["<a>hi</a>", "a"], "hi",
	["<a href='h'><a>hi</a></a>", "a"], "<a>hi</a>",
	["<a><a href='h'>hi</a></a>", "a"], "<a href='h'>hi</a>"
)
@export
var extractInnerText = fn(html, tag, start = 0) {
	if (start < 0) {
		""
	} else {
		var startTag = "<" + tag;
		var endTag = "</{{tag}}>"

		var openIdx = html.indexOf(startTag, start);
		if (openIdx < 0) {
			"";
		} else { 
			var openIdx = html.indexOf(">", openIdx);
			var endIdx = html.indexOf(endTag, openIdx + 1);
			if (endIdx < 0) {
				""
			} else {
				findEndTag(html, startTag, endTag, openIdx, openIdx)
			}
		}
	}
}

var findEndTag = fn(html, startTag, endTag, startPos, i, depth = 1) {
	if (i < len(html) && depth > 0) {
		var nextOpen = html.indexOf(startTag, i);
		var nextClose = html.indexOf(endTag, i);
		if (nextClose == -1) {
			""
		} else if (nextOpen != -1 && nextOpen < nextClose) {
			var nextEnd = html.indexOf(">", nextOpen) + 1;
			findEndTag(html, startTag, endTag, startPos, nextEnd, depth + 1)
		} else {
			var nextEnd = nextClose + len(endTag);
			findEndTag(html, startTag, endTag, startPos, nextEnd, depth - 1)
		}
	} else {
		html[startPos + 1: i - len(endTag)]
	}
}







