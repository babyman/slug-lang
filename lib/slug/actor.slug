var {*} = import(
	"slug.std",
	"slug.math",
	"slug.list"
);

// spawn creates a new actor process that executes the given function
// Parameters:
//   f: function to execute in the new process
//   args: optional arguments to pass to the function
// Returns:
//   integer PID of the newly created process
foreign spawn = fn(f, ...args);

// self returns the PID of the current process
// Returns:
//   integer PID of the calling process, error if called outside process context
foreign self = fn();

// send delivers a message to the specified process
// Parameters:
//   pid: process ID of the recipient
//   message: data to send to the process
// Returns:
//   the recipient's PID
foreign send = fn(pid, message);

// receive waits for a message to arrive in the process mailbox
// Parameters:
//   timeout: optional integer timeout in milliseconds
// Returns:
//   received message data, or nil on timeout
foreign receive = fn(timeout);

foreign register = fn (pid, name);

foreign unregister = fn (pid, name);

foreign whereIs = fn(name);

var groupCreate = fn(name, ...members) {
	spawn(var grp = fn(members, next = 0) {
		println("{{self()}} waiting with members {{members}}!");
		match receive() {
			{tag: "add", member} => grp(members :+ member, next);
			{tag: "remove", member} => grp(members.removeValue(member), next);
			{tag: "send", message} => {
					members.map(fn(v) {v.send(message)});
					grp(members, next);
				}
			{tag: "sendOne", message} => {
					members[next].send(message);
					grp(members, zeroIfAbove(next + 1, len(members)));
				}
			message => {
					members[next].send(message);
					grp(members, zeroIfAbove(next + 1, len(members)));
				}
		}
	}, members).register(name)
}

var groupAdd = fn(name, pid) {
	whereIs(name).send({tag: "add", member: pid})
}

var groupRemove = fn(name, pid) {
	whereIs(name).send({tag: "remove", member: pid})
}

var groupSend = fn(name, message) {
	whereIs(name).send({tag: "send", message: message})
}

var groupSendOne = fn(name, message) {
	whereIs(name).send({tag: "sendOne", message: message})
}

var supervisedGroup = fn(name, ...pids) {
    ???;
}
