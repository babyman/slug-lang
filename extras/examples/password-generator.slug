var {*} = import(
	"slug.cli",
	"slug.std",
	"slug.sys",
	"slug.list",
	"slug.meta"
);

@help({name: "Slug Password Generator (SPG)", version: "1.0"})
var helpText = """
Slug Password Generator (SPG)
=============================

Welcome to the Slug password generator.

""";

@option({arg: ["h", "help"], description: "Show this screen"})
var help = "false";

@option({arg: ["v", "version"], description: "Show version"})
var version = "false"

@option({arg: ["l", "length"], description: "The length of the password to generate"})
var length = 25;

@option({arg: ["c", "count"], description: "The number of passwords to generate"})
var count = 5

@option({arg: "letters", description: "Valid letters to be used in password generation"})
var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

@option({arg: "numbers", description: "Valid numbers to be used in password generation"})
var numbers = "1234567890"

@option({arg: "symbols", description: "Valid symbols to be used in password generation"})
var symbols = "!@#$^&*:;,./?"

@parameters
var params = []

applyOptions(args);

if (toBoolean(help)) {
	println(withEnv(helpMessage)())
	exit(0)
} else if (toBoolean(version)) {
	println(withEnv(versionMessage)())
	exit(0)	
}


val generatePassword = fn(max = 0, chars, acc = "") {
	if (len(acc) >= max) {
		acc
	} else {
		generatePassword(max, chars, acc + chars /> shuffle()[0])
	}
}

val chars = (letters + numbers + symbols) /> asList()

range(1, count + 1)
	 /> map(fn(i) {i + ". " + generatePassword(length, chars)})
	 /> reduce("Passwords generated:\n\n", fn(a, b) {a + b + "\n"})

