var {*} = import(
    "slug.std",
    "slug.test"
);

var map = {k1: "v1", k2: "v2"}
var emptyMap = {}

// ensure that match vars shadow outer scope
var k1 = "shadowed";


// match non-empty map
// -------------------
match map {
    {} => fail();
    {...} => true;
    _ => fail();
}

match map {
    {...} => true; // will also match empty map
    _ => fail();
}

// match non-empty map, capture the spread
// ---------------------------------------
match map {
    {...t} => t /> len() /> assertEqual(2);
    _ => fail();
}

// match k1 key and capture the spread
// -----------------------------------
match map {
    {k1, ...t} => {
        t /> len() /> assertEqual(1);
        k1 /> assertEqual("v1");
    }
    _ => fail();
}

match map {
    {k1, k2, ...t} => {
        t /> len() /> assertEqual(0);
        k1 /> assertEqual("v1");
        k2 /> assertEqual("v2");
    }
    _ => fail();
}

match map {
    {k1} => k1 /> assertEqual("v1");
    _ => fail();
}

// match and alias
// ---------------
match map {
    {k1:key} => key /> assertEqual("v1");
    _ => fail();
}

// match on a literal
// ------------------
match map {
    {k1:"v1", k2} => k2 /> assertEqual("v2");
    _ => fail();
}

match map {
    {k1:"--not k1--", k2} => fail();
    _ => true;
}

// exact matching
// --------------
match map {
    {|k1,k2|} => {
        k1 /> assertEqual("v1");
        k2 /> assertEqual("v2");
    }
    _ => fail();
}

match map {
    {|k1|} => fail();
    _ => true;
}

// match and select all
// --------------------
match map {
    {*} => {
        k1 /> assertEqual("v1");
        k2 /> assertEqual("v2");
    }
    _ => fail();
}

// match empty map
// ---------------
match emptyMap {
    {} => true;
    _ => fail();
}

match emptyMap {
    {*} => true;
    _ => fail();
}

match emptyMap {
    {...} => true;
    _ => fail();
}
