import slug.std.*;
import slug.test.*;

// declare a function
var sqr = fn(a) { a * a }

var sum = fn(ns, acc = 0) {
    match ns {
        [h, ...t] => sum(t, acc + h);
        [] => acc;
    }
}

// function chaining
// -----------------------
// function chaining works here because the code is extrapolated by the parser into:
//
// var n = sqr(sqr(2))
//
var out = 2.sqr().sqr();
assert(out == 16, "got:" + out);

//
// default parameter value
// -----------------------
var f = fn(a, b = 1) { a + b }
var out = 1.f();
assert(out == 2, "expected 2, got " + out);
var out = 1.f(10);
assert(out == 11, "expected 11, got " + out)


// variadic function example
// -------------------------
var f = fn(a, ...b) { a + b.len() }
var out = 1.f(0, 0, 0);
assert(out == 4, "expected 4, got " + out);

// variadic spread example
// -----------------------

var f = fn(...args) {
    args;
}

f(1, 2, 3).assertListEqual([1, 2, 3]);
f(...[1 ,2]).assertListEqual([1, 2]);
f(0, ...[1 ,2]).assertListEqual([0, 1, 2]);
f(...[1 ,2], 9).assertListEqual([1, 2, 9]);
f(0, ...[1 ,2], 9).assertListEqual([0, 1, 2, 9]);
f(...[1 ,2] :+ 3).assertListEqual([1, 2, 3]);
f(0,...[1 ,2] :+ 3, 9).assertListEqual([0, 1, 2, 3, 9]);
